# System Specification: Rust TUI Application for Systeminit/si API

## 1. Purpose
This application provides a terminal user interface (TUI) for interacting with the Systeminit/si API using the luminork service.

## 2. Dependencies
- Rust (Project initialized with `cargo init`)
- ratatui = "0.26"
- tokio = { version = "1", features = ["full"] }
- crossterm = "0.27"
- serde = { version = "1.0", features = ["derive"] } (For JSON deserialization)
- serde_json = "1.0" (For JSON deserialization)
- reqwest = { version = "0.12", features = ["json"] } (For making HTTP API calls)
- dotenvy = "0.15" (For loading `.env` configuration)

## 3. API Endpoint & Configuration
- Base API URL is loaded from the `SI_API` variable in the `.env` file.
- Authentication uses a JWT token loaded from the `JWT_TOKEN` variable in the `.env` file.
- The OpenAPI schema is defined in `openapi.json`.

## 4. API Client Implementation
- API calls are handled by functions in `src/api_client.rs`.
- Uses `reqwest` for HTTP communication.
- Loads configuration lazily using `std::sync::OnceLock`.
- Data models corresponding to API responses are defined in `src/api_models.rs` using `serde` (includes `WhoamiResponse`, `ApiError`, `ListChangeSetV1Response`, `ChangeSetSummary`).
- Implements API calls for:
    - `/whoami` (in `api_client::whoami`)
    - `GET /v1/w/{workspace_id}/change-sets` (in `api_client::list_change_sets`)
- The previously mentioned `luminork` dependency/service is **not** currently used; `reqwest` is used directly.

## 5. TUI Layout & State
- The TUI displays data retrieved from the API.
- Application state is managed in the `App` struct in `src/main.rs` (includes `whoami_data`, `change_sets`, `change_set_list_state`, `logs`, `log_scroll`).
- Displays the user's email (from `/whoami`) in a top bar (1 line high).
- The main content area is split vertically:
    - Top part displays `/whoami` data (User ID, Workspace ID).
    - Bottom part displays a selectable list of change sets (Name, Status, ID) using `ratatui::widgets::List`. The selected item is highlighted.
- Displays a scrollable log window at the bottom (10 lines high), including logs from API calls.

## 6. Event Handling
- Handles basic keyboard input:
    - 'q' to quit.
    - Up Arrow: Select previous item in the change set list (wraps around).
    - Down Arrow: Select next item in the change set list (wraps around).
    - 'k': Scroll the log window up.
    - 'j': Scroll the log window down.
    - TODO: Add key for selecting/acting on a change set (e.g., Enter).

## 7. Error Handling
- Basic terminal setup/teardown error handling is in place.
- API client functions return `Result` to propagate errors (env loading, network, deserialization). The `whoami` function now returns logs on success.
- Errors during initial API call in `run_app` are now logged to the TUI's log window.
- API request/response details (status, body) are logged to the TUI's log window.
- TODO: Parse specific API errors (like `ApiError` model) more consistently in the client for better error messages in logs.

## 8. Testing
- A basic integration test file exists at `tests/api_calls.rs`.
- Contains a placeholder test for `/whoami` (needs update to use real client).
- Standard unit test in `main.rs` exists.

## 9. Current Status (as of 2025-04-21 - Updated)
- Project initialized with basic TUI structure (ratatui, crossterm).
- Dependencies added (`serde`, `reqwest`, `dotenvy`).
- `.env` file provides API URL and JWT token.
- API client module (`src/api_client.rs`) created using `reqwest`.
- API models module (`src/api_models.rs`) created using `serde`.
- `/whoami` endpoint is called on startup using credentials from `.env`.
- TUI displays `/whoami` data (email in top bar, rest in main area).
- TUI displays API request/response logs in a scrollable window at the bottom.
- Handles keyboard input: 'q' to quit, Up/Down/j/k to scroll logs.
- Placeholder test for `/whoami` exists in `tests/api_calls.rs`.
- Placeholder test for `GET /change_set` exists in `tests/api/change_sets.rs`.
- Test modules are organized under the `tests/api/` directory.
- Specification document updated.
- **Note:** The `luminork` dependency/service mentioned previously is **not** used by this TUI application. The local `si/` clone is also not directly used by the current implementation.
- **Note:** The implementation for the luminork service itself is available locally within the `si/` repository clone at `si/lib/luminork-server/`.

# System Specification: Rust TUI Application for Systeminit/si API

## 1. Purpose
This application provides a terminal user interface (TUI) for interacting with the Systeminit/si API using the luminork service.

## 2. Dependencies
- Rust (Project initialized with `cargo init`)
- ratatui = "0.26"
- tokio = { version = "1", features = ["full"] }
- crossterm = "0.27"
- serde = { version = "1.0", features = ["derive"] } (For JSON deserialization)
- serde_json = "1.0" (For JSON deserialization)
- reqwest = { version = "0.12", features = ["json"] } (For making HTTP API calls)
- dotenvy = "0.15" (For loading `.env` configuration)

## 3. API Endpoint & Configuration
- Base API URL is loaded from the `SI_API` variable in the `.env` file.
- Authentication uses a JWT token loaded from the `JWT_TOKEN` variable in the `.env` file.
- The OpenAPI schema is defined in `openapi.json`.
- A detailed specification of the implemented server-side API endpoints can be found in `specs/api_specification.md`.

### 3.1 Build Configuration
- Build settings are configured in `.cargo/config.toml`.
- Specific rustflags are applied:
    - `-Z threads=8`: Enables unstable parallel compilation using 8 threads.
    - `-Aunused_imports`: Allows unused imports without warnings.
- Development profile (`[profile.dev]`) optimization level is set to `0`.

## 4. API Client Implementation
- Core logic (API client, models) is defined in the library (`src/lib.rs`).
- `api_models` module (`src/api_models.rs`) defines data structures using `serde`.
- The `api_client` module (`src/api_client/mod.rs`) organizes API call implementations. Each endpoint interaction is generally in its own file within the `src/api_client/` directory (e.g., `src/api_client/list_change_sets.rs`).
- Uses `reqwest` for HTTP communication.
- Loads configuration lazily using `std::sync::OnceLock`.
- Data models corresponding to API responses are defined in `src/api_models.rs`. Key models include:
    - `WhoamiResponse`, `TokenDetails`
    - `ApiError`
    - `ChangeSetSummary`, `ChangeSet` (new detailed struct)
    - `ListChangeSetV1Response`
    - `CreateChangeSetV1Request`, `CreateChangeSetV1Response`
    - `GetChangeSetV1Response`
    - `DeleteChangeSetV1Response` (Response for abandon operation)
    - `MergeStatusV1Response`, `MergeStatusV1ResponseAction`, `MergeStatusV1ResponseActionComponent`
    - Component Models: `CreateComponentV1Request`, `CreateComponentV1Response`, `GetComponentV1Response`, `UpdateComponentV1Request`, `UpdateComponentV1Response`, `DeleteComponentV1Response`, `Connection`, `ConnectionPoint`, etc.
- Implements API calls for:
    - `/whoami` (in `api_client::whoami`)
    - `GET /v1/w/{workspace_id}/change-sets` (in `api_client::list_change_sets`)
    - `POST /v1/w/{workspace_id}/change-sets` (in `api_client::create_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::get_change_set`)
    - `DELETE /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::abandon_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}/merge_status` (in `api_client::get_merge_status`)
    - `POST /v1/w/{workspace_id}/change-sets/{change_set_id}/force_apply` (in `api_client::force_apply`)
    - `POST /v1/w/{workspace_id}/change-sets/{change_set_id}/components` (in `api_client::create_component`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}/components/{component_id}` (in `api_client::get_component`)
    - `PUT /v1/w/{workspace_id}/change-sets/{change_set_id}/components/{component_id}` (in `api_client::update_component`)
    - `DELETE /v1/w/{workspace_id}/change-sets/{change_set_id}/components/{component_id}` (in `api_client::delete_component`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}/schema` (in `api_client::list_schemas`)
- The main binary entry point is defined in `src/main.rs`, which sets up the terminal and calls the main application loop (`run_app::run_app`). It declares `app`, `refresh_change_sets`, `run_app`, and `ui` as modules, referencing files/directories at the `src/` level.
- The previously mentioned `luminork` dependency/service is **not** currently used; `reqwest` is used directly.

## 5. TUI Layout & State
- The TUI displays data retrieved from the API.
- Application state is managed in the `App` struct defined in `src/app.rs`. Includes:
    - `whoami_data`: Data from `/whoami`.
    - `change_sets`: List of `ChangeSetSummary`.
    - `change_set_list_state`: `ListState` for the change set list.
    - `selected_change_set_details`: `Option<ChangeSet>` for the selected item's details.
    - `selected_change_set_merge_status`: `Option<MergeStatusV1Response>` for the selected item's merge status.
    - `current_action`: `Option<String>` to display feedback during API calls (shown in log title bar).
    - `input_mode`: `InputMode` enum (`Normal`, `ChangeSetName`) to track current input state.
    - `input_buffer`: `String` to store user input for change set name.
    - `logs`: `Vec<String>` for logging messages.
    - `log_scroll`: `usize` for scrolling the log view. The view automatically scrolls to the bottom when new logs are added via `add_log_auto_scroll`.
    - `dropdown_focus`: `DropdownFocus` enum (`Workspace`, `ChangeSet`) to track which top-level trigger has focus *within the TopBar*.
    - `changeset_dropdown_active`: `bool` to control visibility of the change set dropdown list.
    - `schemas`: `Vec<String>` holding the names of schemas fetched from the API (`list_schemas` endpoint).
    - `schema_list_state`: `ListState` for the schema list selection.
    - `current_focus`: `AppFocus` enum (`TopBar`, `SchemaList`, `ContentArea`, `LogPanel`, `ChangeSetDropdown`, `Input`) tracking the currently focused UI pane.
- Layout (defined in `src/ui.rs`):
    - Top bar (1 line): Displays Workspace trigger (left, ID in Cyan), Change Set trigger (middle, selected name in Yellow), and user email (right). Focused trigger is highlighted with a background color. Rendered by `src/ui/render_top_bar.rs`.
    - Middle Area (split horizontally):
        - Left Pane (fixed width): Displays a scrollable list of available schemas (`app.schemas`). Rendered by `src/ui/render_schema_list.rs`. Border highlights when focused (`AppFocus::SchemaList`).
        - Right Pane (flexible): Displays the details (`selected_change_set_details`) and merge status (`selected_change_set_merge_status`) of the selected change set if available. Otherwise, displays a static list of application keybindings. Rendered by `src/ui/render_content_area.rs`.
    - Change Set Dropdown (conditional overlay): If `changeset_dropdown_active` is true, displays a selectable list of change sets below the Change Set trigger. Items are color-coded based on their status. Rendered by `src/ui/render_changeset_dropdown.rs`.
    - Log window (10 lines, bottom): Displays scrollable logs (`logs`). Action status may appear in the title. Logs automatically scroll to the bottom when new entries are added. Rendered by `src/ui/render_log_panel.rs`. Border highlights when focused (`AppFocus::LogPanel`).
    - Input line (1 line, bottom, conditional): Displays the input prompt and buffer when `input_mode` is `ChangeSetName`. Rendered by `src/ui/render_input_line.rs`. Focus automatically moves here (`AppFocus::Input`) when mode changes.
- The main UI rendering function `ui` is defined in `src/ui.rs`. It sets up the overall layout (`ratatui::layout::Layout`) and delegates rendering of specific components to helper functions located within the `src/ui/` directory.

## 6. Event Handling
- The main application loop is the asynchronous `run_app` function defined in `src/run_app.rs`.
- Keyboard event handling logic is primarily located in `src/run_app/event_handler.rs`, called from the main loop.
- Handles keyboard input based on `app.input_mode` and `app.current_focus`:
    - **Global:**
        - 'q': Quit the application (except in Input mode).
    - **Normal Mode (`InputMode::Normal`):**
        - **Focus Cycling (Tab):** Cycles focus between `TopBar`, `SchemaList`, and `LogPanel`.
        - **Focus: `TopBar`:**
            - Left/Right Arrows: Switch focus between Workspace and Change Set triggers (`dropdown_focus`).
            - Enter/Space: Activate the focused trigger (`dropdown_focus`).
                - Workspace: (No action).
                - Change Set: Opens/closes the change set dropdown (`changeset_dropdown_active`). If dropdown is opened, focus remains `TopBar`. If dropdown is closed by selecting an item (Enter), fetches details, status, and schemas for the selected change set.
            - 'c': Enter `ChangeSetName` input mode and set focus to `Input`.
            - 'd': Abandon the *currently selected* change set (from `change_set_list_state`) using `abandon_change_set`. Refreshes list and schemas.
            - 'f': Force apply the *currently selected* change set using `force_apply`. Refreshes list and schemas.
            - 'k'/'j': Scroll log panel up/down (global scroll).
        - **Focus: `SchemaList`:**
            - Up/Down Arrows: Select previous/next schema in the list (`schema_list_state`).
            - 'k'/'j': Scroll log panel up/down (global scroll).
        - **Focus: `LogPanel`:**
            - Up/Down Arrows or 'k'/'j': Scroll log panel up/down.
        - **Focus: `ContentArea`:** (Currently skipped in focus cycle)
            - 'k'/'j': Scroll log panel up/down (global scroll).
        - **Focus: `ChangeSetDropdown`:** (Handled within `TopBar` focus when `changeset_dropdown_active` is true)
            - Up/Down Arrows: Select previous/next change set.
            - Enter: Selects item, closes dropdown, fetches details/status/schemas. Focus remains `TopBar`.
            - Esc: Closes dropdown without selection. Focus remains `TopBar`.
            - Tab: Closes dropdown and cycles focus to `SchemaList`.
    - **Input Mode (`InputMode::ChangeSetName`):** (Focus is automatically set to `Input`)
        - Enter: Submits the entered name (`input_buffer`) to create a new change set using `create_change_set`. Refreshes list, **automatically selects the newly created change set**, fetches its schemas, and returns to Normal mode with focus on `TopBar`.
        - Esc: Cancel input, clear buffer, and return to Normal mode with focus on `TopBar`.
        - Backspace: Delete the last character from the input buffer.
        - Character input: Append character to the input buffer.
- Uses the helper function `refresh_change_sets` (defined in `src/refresh_change_sets.rs`) to reload the change set list after create, delete, or apply actions.
- Includes helper functions in `event_handler.rs` (`fetch_details_and_status`, `fetch_schemas`) to handle API calls triggered by user actions.
- Includes a method `App::select_change_set_by_id` to programmatically select a change set based on its ID.

## 7. Error Handling
- Basic terminal setup/teardown error handling is in place within `src/main.rs`.
- API client functions return `Result<(ResponseType, Vec<String>), Box<dyn Error>>` to propagate errors and logs.
- Errors during API calls in `run_app` are logged to the TUI's log window (with auto-scroll).
- The `current_action` state provides user feedback during potentially long-running API calls.
- TODO: Parse specific API errors (like `ApiError` model) more consistently in the client for better error messages in logs.

## 8. Testing
- Integration tests for API client functions are located in `tests/api/`.
    - Tests cover `/whoami` and change set operations (`list`, `create`, `get`, `abandon`, `merge_status`, `force_apply`).
    - Tests cover component operations (`create`, `get`, `update`, `delete`) in `tests/api/components.rs`.
- Unit tests are located in `tests/unit/`.
    - Unit tests for API model deserialization exist in `tests/unit/api_models.rs`.
    - Unit tests for `App` state logic (including manual and automatic log scrolling) exist in `tests/unit/app_state.rs`. (Note: These tests might need path updates after the refactor).
- Test modules (`api`, `unit`) are declared in the main test file `tests/api_calls.rs`.
- API test modules (`change_sets`, `whoami`, `components`) are declared in `tests/api/mod.rs`.
- Unit test modules (`api_models`, `app_state`) are declared in `tests/unit/mod.rs`.
- **TODO:** Add tests for TUI interactions and state management. Update `app_state.rs` tests for new module paths.

## 9. Current Status (as of 2025-04-22 - Split main.rs)
- Project refactored into a library (`src/lib.rs`) and a binary (`src/main.rs`).
- `src/main.rs` was further split into modules: `app.rs`, `refresh_change_sets.rs`, `run_app.rs` (containing the main loop), `ui.rs` (containing the main render function).
- The `api_client` logic is now in the `src/api_client/` directory.
- The event handling logic is primarily in `src/run_app/event_handler.rs`.
- The UI rendering helpers are in the `src/ui/` directory.
- API client and models are in the library.
- API client uses `reqwest` and lazy static config from `.env`.
- All specified changeset API endpoints are implemented in the client (`whoami`, `list_change_sets`, `create_change_set`, `get_change_set`, `abandon_change_set`, `get_merge_status`, `force_apply`).
- Component API endpoints (`create_component`, `get_component`, `update_component`, `delete_component`) are implemented in the client (`src/api_client/`).
- TUI implemented (split across `run_app.rs` for main loop, `run_app/event_handler.rs` for input logic, `ui.rs` for main layout, and `src/ui/` for component rendering):
    - Fetches and displays `/whoami` data (Workspace ID, Email) on startup.
    - Top bar displays Workspace trigger (static, ID in Cyan), Change Set dropdown trigger (selected name in Yellow), and Email. Focus is switchable via Tab and highlighted.
    - Change Set trigger (Enter/Space) opens/closes a dropdown list of available change sets (items are color-coded by status).
    - Dropdown list allows selection via Up/Down arrows. Enter selects, Esc/Tab closes.
    - Main content area displays change set details and merge status when available, otherwise shows keybindings. Details/status are fetched when selecting a change set or performing actions ('d' - abandon, 'f' - apply).
    - Supports creating change sets ('c' enters input mode, Enter submits name).
    - Supports abandoning ('d') and applying ('f') the *selected* change set.
    - Displays API logs and action status messages (in log window title bar). Logs automatically scroll to the bottom when new entries are added.
    - Displays input prompt and buffer (in bottom line) when creating a change set.
    - Handles manual log scrolling (j/k) in Normal mode.
    - Handles text input (characters, Backspace, Esc, Enter) in ChangeSetName mode.
    - Allows quitting ('q').
- Integration tests exist for API client functions (change sets, whoami, components) in `tests/api/`.
- Unit tests exist for API model deserialization (`tests/unit/api_models.rs`) and App state (`tests/unit/app_state.rs`). A basic smoke test for UI rendering (`tests/unit/ui_rendering.rs`) ensures the main `ui` function doesn't panic. (Note: `app_state.rs` tests might need path updates if they reference moved logic directly).
- **Note:** The `luminork` dependency/service mentioned previously is **not** used by this TUI application. The local `si/` clone is also not directly used by the current implementation.
- **Note:** The implementation for the luminork service itself is available locally within the `si/` repository clone at `si/lib/luminork-server/`.
- **Note:** (2025-04-27) The code structure reflects further refactoring: API client calls are in `src/api_client/`, event handling in `src/run_app/event_handler.rs`, and UI rendering helpers in `src/ui/`.

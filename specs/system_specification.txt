# System Specification: Rust TUI Application for Systeminit/si API

## 1. Purpose
This application provides a terminal user interface (TUI) for interacting with the Systeminit/si API using the luminork service.

## 2. Dependencies
- Rust (Project initialized with `cargo init`)
- ratatui = "0.26"
- tokio = { version = "1", features = ["full"] }
- crossterm = "0.27"
- serde = { version = "1.0", features = ["derive"] } (For JSON deserialization)
- serde_json = "1.0" (For JSON deserialization)
- reqwest = { version = "0.12", features = ["json"] } (For making HTTP API calls)
- dotenvy = "0.15" (For loading `.env` configuration)

## 3. API Endpoint & Configuration
- Base API URL is loaded from the `SI_API` variable in the `.env` file.
- Authentication uses a JWT token loaded from the `JWT_TOKEN` variable in the `.env` file.
- The OpenAPI schema is defined in `openapi.json`.

## 4. API Client Implementation
- Core logic (API client, models) is defined in the library (`src/lib.rs`).
- `api_client` and `api_models` modules are part of the library.
- API calls are handled by functions in `src/api_client.rs` (now part of the library).
- Uses `reqwest` for HTTP communication.
- Loads configuration lazily using `std::sync::OnceLock`.
- Data models corresponding to API responses are defined in `src/api_models.rs` (now part of the library) using `serde`. Key models include:
    - `WhoamiResponse`, `TokenDetails`
    - `ApiError`
    - `ChangeSetSummary`, `ChangeSet` (new detailed struct)
    - `ListChangeSetV1Response`
    - `CreateChangeSetV1Request`, `CreateChangeSetV1Response`
    - `GetChangeSetV1Response`
    - `DeleteChangeSetV1Response`
    - `MergeStatusV1Response`, `MergeStatusV1ResponseAction`, `MergeStatusV1ResponseActionComponent`
- Implements API calls for:
    - `/whoami` (in `api_client::whoami`)
    - `GET /v1/w/{workspace_id}/change-sets` (in `api_client::list_change_sets`)
    - `POST /v1/w/{workspace_id}/change-sets` (in `api_client::create_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::get_change_set`)
    - `DELETE /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::delete_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}/merge_status` (in `api_client::get_merge_status`)
    - `POST /v1/w/{workspace_id}/change-sets/{change_set_id}/force_apply` (in `api_client::force_apply_change_set`)
- The main binary is defined in `src/main.rs` and uses the library.
- The previously mentioned `luminork` dependency/service is **not** currently used; `reqwest` is used directly.

## 5. TUI Layout & State
- The TUI displays data retrieved from the API.
- Application state is managed in the `App` struct in `src/main.rs`. Includes:
    - `whoami_data`: Data from `/whoami`.
    - `change_sets`: List of `ChangeSetSummary`.
    - `change_set_list_state`: `ListState` for the change set list.
    - `selected_change_set_details`: `Option<ChangeSet>` for the selected item's details.
    - `selected_change_set_merge_status`: `Option<MergeStatusV1Response>` for the selected item's merge status.
    - `current_action`: `Option<String>` to display feedback during API calls.
    - `show_details_pane`: `bool` to control visibility of the details pane.
    - `input_mode`: `InputMode` enum (`Normal`, `ChangeSetName`) to track current input state.
    - `input_buffer`: `String` to store user input for change set name.
    - `logs`: `Vec<String>` for logging messages.
    - `log_scroll`: `usize` for scrolling the log view.
- Layout:
    - Top bar (1 line): Displays current action status (left, only if not in input mode) and user email (right).
    - Main content area (flexible):
        - If `show_details_pane` is false: Displays user info (top) and the selectable change set list (bottom).
        - If `show_details_pane` is true: Splits horizontally into two panes:
            - Left Pane: User info (top) and change set list (bottom).
            - Right Pane (Details Pane): Displays details (`selected_change_set_details`) and merge status (`selected_change_set_merge_status`) for the selected change set.
    - Log window (10 lines): Displays scrollable logs (`logs`). Positioned above the input line if active.
    - Input line (1 line, bottom, conditional): Displays the input prompt and buffer when `input_mode` is `ChangeSetName`.

## 6. Event Handling
- Main event loop in `run_app` is asynchronous (`async fn`).
- Handles keyboard input:
    - 'q': Quit the application.
    - Up Arrow: Select previous item in the change set list (wraps).
    - Down Arrow: Select next item in the change set list (wraps).
    - 'k': Scroll the log window up (Normal mode).
    - 'j': Scroll the log window down (Normal mode).
    - Enter:
        - Normal mode: Toggle the visibility of the details pane (`show_details_pane`). When opening, fetches details using `get_change_set` and `get_merge_status` API calls.
        - ChangeSetName mode: Submits the entered name to create a new change set using `create_change_set` API call. Refreshes the list and returns to Normal mode.
    - 'c': (Normal mode) Enter `ChangeSetName` input mode to prompt the user for a new change set name.
    - 'd': (Normal mode) Delete the selected change set using `delete_change_set` API call. Refreshes the list.
    - 'f': (Normal mode) Force apply the selected change set using `force_apply_change_set` API call. Refreshes the list.
    - Esc: (ChangeSetName mode) Cancel input, clear buffer, and return to Normal mode.
    - Backspace: (ChangeSetName mode) Delete the last character from the input buffer.
    - Character input: (ChangeSetName mode) Append character to the input buffer.
- Uses a helper function `refresh_change_sets` to reload the change set list after create, delete, or apply actions.

## 7. Error Handling
- Basic terminal setup/teardown error handling is in place.
- API client functions return `Result<(ResponseType, Vec<String>), Box<dyn Error>>` to propagate errors and logs.
- Errors during API calls in `run_app` are logged to the TUI's log window.
- The `current_action` state provides user feedback during potentially long-running API calls.
- TODO: Parse specific API errors (like `ApiError` model) more consistently in the client for better error messages in logs.

## 8. Testing
- Integration tests for API client functions are located in `tests/api/`.
    - Tests cover `/whoami` and change set operations (`list`, `create`, `get`, `delete`, `merge_status`).
- Unit tests are located in `tests/unit/`.
    - Unit tests for API model deserialization exist in `tests/unit/api_models.rs`.
    - Unit tests for `App` state logic were removed due to difficulty testing binary internals.
- Test modules (`api`, `unit`) are declared in the main test file `tests/api_calls.rs`.
- API test modules (`change_sets`, `whoami`) are declared in `tests/api/mod.rs`.
- Unit test modules (`api_models`) are declared in `tests/unit/mod.rs`.
- **TODO:** Add tests for TUI interactions and state management.

## 9. Current Status (as of 2025-04-22 - TUI Update)
- Project refactored into a library (`src/lib.rs`) and a binary (`src/main.rs`).
- API client and models are in the library.
- API client uses `reqwest` and lazy static config from `.env`.
- All specified changeset API endpoints are implemented in the client.
- TUI (`main.rs`) implemented:
    - Fetches and displays `/whoami` data and a list of change sets on startup.
    - Provides a selectable list of change sets.
    - Allows toggling a details pane (Enter in Normal mode) showing selected change set info and merge status.
    - Supports creating change sets ('c' enters input mode, Enter submits name), deleting ('d'), and applying ('f') via keybindings in Normal mode.
    - Displays API logs and action status messages (in top bar).
    - Displays input prompt and buffer (in bottom line) when creating a change set.
    - Handles basic navigation (Up/Down) and log scrolling (j/k) in Normal mode.
    - Handles text input (characters, Backspace, Esc, Enter) in ChangeSetName mode.
    - Allows quitting ('q').
- Integration tests exist for API client functions.
- Unit tests exist for API model deserialization.
- **Note:** The `luminork` dependency/service mentioned previously is **not** used by this TUI application. The local `si/` clone is also not directly used by the current implementation.
- **Note:** The implementation for the luminork service itself is available locally within the `si/` repository clone at `si/lib/luminork-server/`.

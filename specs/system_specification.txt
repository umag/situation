# System Specification: Rust TUI Application for Systeminit/si API

## 1. Purpose
This application provides a terminal user interface (TUI) for interacting with the Systeminit/si API using the luminork service.

## 2. Dependencies
- Rust (Project initialized with `cargo init`)
- ratatui = "0.26"
- tokio = { version = "1", features = ["full"] }
- crossterm = "0.27"
- serde = { version = "1.0", features = ["derive"] } (For JSON deserialization)
- serde_json = "1.0" (For JSON deserialization)
- reqwest = { version = "0.12", features = ["json"] } (For making HTTP API calls)
- dotenvy = "0.15" (For loading `.env` configuration)

## 3. API Endpoint & Configuration
- Base API URL is loaded from the `SI_API` variable in the `.env` file.
- Authentication uses a JWT token loaded from the `JWT_TOKEN` variable in the `.env` file.
- The OpenAPI schema is defined in `openapi.json`.

## 4. API Client Implementation
- Core logic (API client, models) is defined in the library (`src/lib.rs`).
- `api_client` and `api_models` modules are part of the library.
- API calls are handled by functions in `src/api_client.rs` (now part of the library).
- Uses `reqwest` for HTTP communication.
- Loads configuration lazily using `std::sync::OnceLock`.
- Data models corresponding to API responses are defined in `src/api_models.rs` (now part of the library) using `serde` (includes `WhoamiResponse`, `ApiError`, `ListChangeSetV1Response`, `ChangeSetSummary`).
- Implements API calls for:
    - `/whoami` (in `api_client::whoami`)
    - `/whoami` (in `api_client::whoami`)
    - `GET /v1/w/{workspace_id}/change-sets` (in `api_client::list_change_sets`)
    - `POST /v1/w/{workspace_id}/change-sets` (in `api_client::create_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::get_change_set`)
    - `DELETE /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::delete_change_set`)
- The main binary is defined in `src/main.rs` and uses the library.
- The previously mentioned `luminork` dependency/service is **not** currently used; `reqwest` is used directly.

## 5. TUI Layout & State
- The TUI displays data retrieved from the API.
- Application state is managed in the `App` struct in `src/main.rs` (includes `whoami_data`, `change_sets`, `change_set_list_state`, `logs`, `log_scroll`).
- Displays the user's email (from `/whoami`) in a top bar (1 line high).
- The main content area is split vertically:
    - Top part displays `/whoami` data (User ID, Workspace ID).
    - Bottom part displays a selectable list of change sets (Name, Status, ID) using `ratatui::widgets::List`. The selected item is highlighted.
- Displays a scrollable log window at the bottom (10 lines high), including logs from API calls.

## 6. Event Handling
- Handles basic keyboard input:
    - 'q' to quit.
    - Up Arrow: Select previous item in the change set list (wraps around).
    - Down Arrow: Select next item in the change set list (wraps around).
    - 'k': Scroll the log window up.
    - 'j': Scroll the log window down.
    - TODO: Add key for selecting/acting on a change set (e.g., Enter).

## 7. Error Handling
- Basic terminal setup/teardown error handling is in place.
- API client functions return `Result` to propagate errors (env loading, network, deserialization). The `whoami` function now returns logs on success.
- Errors during initial API call in `run_app` are now logged to the TUI's log window.
- API request/response details (status, body) are logged to the TUI's log window.
- TODO: Parse specific API errors (like `ApiError` model) more consistently in the client for better error messages in logs.

## 8. Testing
- Integration tests are located in `tests/api/`.
    - Implemented test for `/whoami` exists in `tests/api/whoami.rs` (requires valid `.env`, enabled).
    - Implemented tests for `GET` (list), `POST` (create), `GET` (specific), and `DELETE` on `/v1/w/{workspace_id}/change-sets` exist in `tests/api/change_sets.rs` (require valid `.env`, enabled).
- Unit tests are located in `tests/unit/`.
    - Unit tests for API model deserialization exist in `tests/unit/api_models.rs`.
    - Unit tests for `App` state logic were removed due to difficulty testing binary internals from `tests/`.
- Test modules (`api`, `unit`) are declared in the main test file `tests/api_calls.rs`.
- API test modules (`change_sets`, `whoami`) are declared in `tests/api/mod.rs`.
- Unit test modules (`api_models`) are declared in `tests/unit/mod.rs`.

## 9. Current Status (as of 2025-04-22 - Updated)
- Project refactored into a library (`src/lib.rs`) and a binary (`src/main.rs`).
- `api_client` and `api_models` moved to the library.
- Dependencies added (`serde`, `reqwest`, `dotenvy`).
- `.env` file provides API URL and JWT token.
- API client uses `reqwest` and lazy static config.
- `/whoami` and `list_change_sets` endpoints are called on startup.
- TUI displays `/whoami` data and a selectable list of change sets.
- TUI displays API logs in a scrollable window.
- Handles keyboard input: 'q' to quit, Up/Down for list nav, j/k for log scroll.
- Placeholder integration tests exist for API calls.
- Unit tests exist for API model deserialization in `tests/unit/api_models.rs`.
- Specification document updated.
- **Note:** The `luminork` dependency/service mentioned previously is **not** used by this TUI application. The local `si/` clone is also not directly used by the current implementation.
- **Note:** The implementation for the luminork service itself is available locally within the `si/` repository clone at `si/lib/luminork-server/`.

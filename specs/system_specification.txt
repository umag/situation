# System Specification: Rust TUI Application for Systeminit/si API

## 1. Purpose
This application provides a terminal user interface (TUI) for interacting with the Systeminit/si API using the luminork service.

## 2. Dependencies
- Rust (Project initialized with `cargo init`)
- ratatui = "0.26"
- tokio = { version = "1", features = ["full"] }
- crossterm = "0.27"
- serde = { version = "1.0", features = ["derive"] } (For JSON deserialization)
- serde_json = "1.0" (For JSON deserialization)
- reqwest = { version = "0.12", features = ["json"] } (For making HTTP API calls)
- dotenvy = "0.15" (For loading `.env` configuration)

## 3. API Endpoint & Configuration
- Base API URL is loaded from the `SI_API` variable in the `.env` file.
- Authentication uses a JWT token loaded from the `JWT_TOKEN` variable in the `.env` file.
- The OpenAPI schema is defined in `openapi.json`.

## 4. API Client Implementation
- Core logic (API client, models) is defined in the library (`src/lib.rs`).
- `api_client` and `api_models` modules are part of the library.
- API calls are handled by functions in `src/api_client.rs` (now part of the library).
- Uses `reqwest` for HTTP communication.
- Loads configuration lazily using `std::sync::OnceLock`.
- Data models corresponding to API responses are defined in `src/api_models.rs` (now part of the library) using `serde`. Key models include:
    - `WhoamiResponse`, `TokenDetails`
    - `ApiError`
    - `ChangeSetSummary`, `ChangeSet` (new detailed struct)
    - `ListChangeSetV1Response`
    - `CreateChangeSetV1Request`, `CreateChangeSetV1Response`
    - `GetChangeSetV1Response`
    - `DeleteChangeSetV1Response`
    - `MergeStatusV1Response`, `MergeStatusV1ResponseAction`, `MergeStatusV1ResponseActionComponent`
- Implements API calls for:
    - `/whoami` (in `api_client::whoami`)
    - `GET /v1/w/{workspace_id}/change-sets` (in `api_client::list_change_sets`)
    - `POST /v1/w/{workspace_id}/change-sets` (in `api_client::create_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::get_change_set`)
    - `DELETE /v1/w/{workspace_id}/change-sets/{change_set_id}` (in `api_client::delete_change_set`)
    - `GET /v1/w/{workspace_id}/change-sets/{change_set_id}/merge_status` (in `api_client::get_merge_status`)
    - `POST /v1/w/{workspace_id}/change-sets/{change_set_id}/force_apply` (in `api_client::force_apply_change_set`)
- The main binary is defined in `src/main.rs` and uses the library.
- The previously mentioned `luminork` dependency/service is **not** currently used; `reqwest` is used directly.

## 5. TUI Layout & State
- The TUI displays data retrieved from the API.
- Application state is managed in the `App` struct in `src/main.rs`. Includes:
    - `whoami_data`: Data from `/whoami`.
    - `change_sets`: List of `ChangeSetSummary`.
    - `change_set_list_state`: `ListState` for the change set list.
    - `selected_change_set_details`: `Option<ChangeSet>` for the selected item's details.
    - `selected_change_set_merge_status`: `Option<MergeStatusV1Response>` for the selected item's merge status.
    - `current_action`: `Option<String>` to display feedback during API calls (shown in log title bar).
    - `input_mode`: `InputMode` enum (`Normal`, `ChangeSetName`) to track current input state.
    - `input_buffer`: `String` to store user input for change set name.
    - `logs`: `Vec<String>` for logging messages.
    - `log_scroll`: `usize` for scrolling the log view.
    - `dropdown_focus`: `DropdownFocus` enum (`Workspace`, `ChangeSet`) to track which top-level trigger has focus.
    - `changeset_dropdown_active`: `bool` to control visibility of the change set dropdown list.
- Layout:
    - Top bar (1 line): Displays Workspace trigger (left), Change Set trigger (middle), and user email (right). Focused trigger is highlighted.
    - Main content area (flexible): Displays details (`selected_change_set_details`) and merge status (`selected_change_set_merge_status`) for the selected change set.
    - Change Set Dropdown (conditional overlay): If `changeset_dropdown_active` is true, displays a selectable list of change sets below the Change Set trigger.
    - Log window (10 lines, bottom): Displays scrollable logs (`logs`). Action status may appear in the title.
    - Input line (1 line, bottom, conditional): Displays the input prompt and buffer when `input_mode` is `ChangeSetName`.

## 6. Event Handling
- Main event loop in `run_app` is asynchronous (`async fn`).
- Handles keyboard input:
    - **Normal Mode (Dropdown Closed):**
        - 'q': Quit the application.
        - Tab: Switch focus between Workspace and Change Set triggers (`dropdown_focus`).
        - Enter / Space: Activate the focused trigger.
            - Workspace: (Currently no action).
            - Change Set: Opens the change set dropdown list (`changeset_dropdown_active` = true). If an item is selected, also fetches details/status using `get_change_set` and `get_merge_status`.
        - 'c': Enter `ChangeSetName` input mode.
        - 'd': Delete the *currently selected* change set (from `change_set_list_state`) using `delete_change_set`. Refreshes list.
        - 'f': Force apply the *currently selected* change set using `force_apply_change_set`. Refreshes list.
        - 'k': Scroll the log window up.
        - 'j': Scroll the log window down.
    - **Normal Mode (Change Set Dropdown Active):**
        - Up Arrow: Select previous item in the dropdown list (wraps).
        - Down Arrow: Select next item in the dropdown list (wraps).
        - Enter: Selects the highlighted item, closes the dropdown (`changeset_dropdown_active` = false), clears details (requires explicit fetch).
        - Esc / Tab: Closes the dropdown (`changeset_dropdown_active` = false) without changing selection. Tab also switches focus.
    - **ChangeSetName Mode:**
        - Enter: Submits the entered name (`input_buffer`) to create a new change set using `create_change_set`. Refreshes list, returns to Normal mode.
        - Esc: Cancel input, clear buffer, and return to Normal mode.
        - Backspace: Delete the last character from the input buffer.
        - Character input: Append character to the input buffer.
- Uses a helper function `refresh_change_sets` to reload the change set list after create, delete, or apply actions.

## 7. Error Handling
- Basic terminal setup/teardown error handling is in place.
- API client functions return `Result<(ResponseType, Vec<String>), Box<dyn Error>>` to propagate errors and logs.
- Errors during API calls in `run_app` are logged to the TUI's log window.
- The `current_action` state provides user feedback during potentially long-running API calls.
- TODO: Parse specific API errors (like `ApiError` model) more consistently in the client for better error messages in logs.

## 8. Testing
- Integration tests for API client functions are located in `tests/api/`.
    - Tests cover `/whoami` and change set operations (`list`, `create`, `get`, `delete`, `merge_status`).
- Unit tests are located in `tests/unit/`.
    - Unit tests for API model deserialization exist in `tests/unit/api_models.rs`.
    - Unit tests for `App` state logic were removed due to difficulty testing binary internals.
- Test modules (`api`, `unit`) are declared in the main test file `tests/api_calls.rs`.
- API test modules (`change_sets`, `whoami`) are declared in `tests/api/mod.rs`.
- Unit test modules (`api_models`) are declared in `tests/unit/mod.rs`.
- **TODO:** Add tests for TUI interactions and state management.

## 9. Current Status (as of 2025-04-22 - TUI Update)
- Project refactored into a library (`src/lib.rs`) and a binary (`src/main.rs`).
- API client and models are in the library.
- API client uses `reqwest` and lazy static config from `.env`.
- All specified changeset API endpoints are implemented in the client.
- TUI (`main.rs`) implemented (as of 2025-04-22 - Dropdown UI Update):
    - Fetches and displays `/whoami` data (Workspace ID, Email) on startup.
    - Top bar displays Workspace trigger (static), Change Set dropdown trigger, and Email. Focus is switchable via Tab.
    - Change Set trigger (Enter/Space) opens/closes a dropdown list of available change sets.
    - Dropdown list allows selection via Up/Down arrows. Enter selects, Esc/Tab closes.
    - Main content area displays details and merge status for the currently selected change set (fetched on demand via Enter on trigger, 'd', or 'f').
    - Supports creating change sets ('c' enters input mode, Enter submits name).
    - Supports deleting ('d') and applying ('f') the *selected* change set.
    - Displays API logs and action status messages (in log window title bar).
    - Displays input prompt and buffer (in bottom line) when creating a change set.
    - Handles log scrolling (j/k) in Normal mode.
    - Handles text input (characters, Backspace, Esc, Enter) in ChangeSetName mode.
    - Allows quitting ('q').
- Integration tests exist for API client functions.
- Unit tests exist for API model deserialization.
- **Note:** The `luminork` dependency/service mentioned previously is **not** used by this TUI application. The local `si/` clone is also not directly used by the current implementation.
- **Note:** The implementation for the luminork service itself is available locally within the `si/` repository clone at `si/lib/luminork-server/`.
